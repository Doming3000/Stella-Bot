import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder } from "discord.js";
import dotenv from 'dotenv';
import axios from "axios";

// Cargar variables de entorno
dotenv.config();

export const data = new SlashCommandBuilder()
.setName('malware-scan')
.setDescription('Analiza una URL en busca de malware. Puede tardar algún un tiempo.')
.addStringOption(option =>
  option.setName('url')
  .setDescription('URL a analizar.')
  .setRequired(true)
)

// Función para verificar si una URL es válida
function isValidURL(url) {
  try {
    new URL(url);
    return true;
  } catch (err) {
    return false;
  }
}

// Función para crear un retraso para el análisis
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Función principal
export async function run(client, interaction) {
  const url = interaction.options.getString('url');
  
  // Verificar si el valor proporcionado es una URL válida.
  if (!isValidURL(url)) {
    await interaction.reply({ content: "<:Advertencia:1302055825053057084> Debes proporcionar una URL válida.", flags: 64, allowedMentions: { repliedUser: false }});
    return;
  }
  
  try {
    // Indicar que se está procesando la solicitud
    await interaction.deferReply();
    
    // Obtener la clave API de VirusTotal
    const apiKey = process.env.VIRUSAPIKEY;
    const virusTotalUrl = `https://www.virustotal.com/api/v3/urls`;
    
    // Paso 1: Enviar la URL para análisis
    const analysisResponse = await axios.post(
      virusTotalUrl,
      `url=${url}`, // Formato application/x-www-form-urlencoded
      {
        headers: {
          'x-apikey': apiKey,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    
    const analysisId = analysisResponse.data.data.id;
    const resultUrl = `https://www.virustotal.com/api/v3/analyses/${analysisId}`;
    
    // Paso 2: Consultar el estado del análisis
    let analysisStatus = 'queued';
    const maxRetries = 10;
    let retryCount = 0;
    let resultResponse;
    
    while (analysisStatus !== 'completed' && retryCount < maxRetries) {
      await delay(5000);
      resultResponse = await axios.get(resultUrl, {
        headers: {
          'x-apikey': apiKey
        }
      });
      analysisStatus = resultResponse.data.data.attributes.status;
      retryCount++;
    }
    
    if (analysisStatus !== 'completed') {
      throw new Error("El análisis no se completó en el tiempo esperado.");
    }
    
    // Paso 3: Obtener resultados y meta información
    const analysisData = resultResponse.data.data.attributes;
    const urlMetaInfo = resultResponse.data.meta.url_info;
    const positives = analysisData.stats.malicious;
    const totalScans = analysisData.stats.undetected + analysisData.stats.malicious + analysisData.stats.suspicious;
    
    // Determinar el estado del enlace analizado
    const linkStatus = positives > 0 ? "No seguro" : "Seguro";
    
    if (!analysisData.results || !urlMetaInfo) {
      await interaction.editReply({ content: "<:Advertencia:1302055825053057084> No se encontraron resultados de análisis para esta URL.", allowedMentions: { repliedUser: false }});
      return;
    }
    
    // Generar el enlace público usando la ID del análisis
    const publicResultUrl = `https://www.virustotal.com/gui/url/${urlMetaInfo.id}/detection`;
    
    // Crear y enviar un embed con los resultados
    const embed = new EmbedBuilder()
    .setColor(positives > 0 ? '#eb5252' : '#68d268')
    .setAuthor({
      name: `${client.user.username} - ${interaction.commandName}`,
      iconURL: client.user.displayAvatarURL()
    })
    .setThumbnail()
    .setTitle(`Análisis terminado: ${linkStatus}`)
    .addFields(
      { name: 'URL analizada', value: `\`${url}\``, inline: false},
      { name: 'Positivos', value: `${positives}/${totalScans}`, inline: true }
    )
    .setFooter({ text: positives > 0 ? 'No se recomienda acceder a esta URL.' : 'La URL es segura, puedes proceder.' });
    
    // Botón para abrir los resultados en el navegador.
    const actionRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
      .setEmoji("<:Lista:1327042288941137960>")
      .setLabel("Ver resultados")
      .setURL(`${publicResultUrl}`)
      .setStyle("Link")
    );
    
    await interaction.editReply({ embeds: [embed], components: [actionRow], allowedMentions: { repliedUser: false }});
  } catch (error) {
    console.error("Error al realizar el análisis de virus:", error.response ? error.response.data : error.message);
    await interaction.editReply({ content: "<:Advertencia:1302055825053057084> Ha ocurrido un error al ejecutar este comando.", allowedMentions: { repliedUser: false }});
  }
}

// Pendiente:
// Manejo de errores (demasiadas peticiones, demasiados intentos de analisis, etc)